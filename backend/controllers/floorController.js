const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

async function getFloors (req, res) {
    try {
      const { building } = req.query; // Kinyerj√ºk a query param√©tert
  
      // Ellen≈ërizz√ºk, hogy van-e megadott building n√©v
      const whereCondition = building
        ? { building: { name: building } }
        : {};
  
      const floors = await prisma.floor.findMany({
        where: whereCondition, // Sz≈±r√©s a megadott √©p√ºletn√©v szerint
        include: {
          building: true,
          rooms: true,
        },
      });
  
      const geoJsonData = {
        type: "FeatureCollection",
        features: floors.map((floor) => ({
          type: "Feature",
          geometry: {
            type: "Polygon",
            coordinates: floor.coordinates
              ? [JSON.parse(floor.coordinates)]
              : [],
          },
          properties: {
            id: floor.id,
            number: floor.number,
            height: floor.height,
            building: floor.building.name,
            buildingId: floor.building.id,
            category: "floor",
          },
        })),
      };
  
      res.json(geoJsonData);
    } catch (error) {
      console.error("üö® Hiba t√∂rt√©nt:", error);
      res.status(500).json({ error: "Nem siker√ºlt lek√©rni a szinteket." });
    }
  }

  async function updateFloors (req, res) {
    try {
      const updatedFloors = req.body;
      console.log("üîÑ Friss√≠tett szintek:", JSON.stringify(updatedFloors, null, 2));
  
      for (const floor of updatedFloors.features) {
        console.log(`üõ† Friss√≠t√©s alatt: Floor ID = ${floor.properties.id}`);
  
        const existingFloor = await prisma.floor.findUnique({
          where: { id: floor.properties.id },
        });
  
        if (!existingFloor) {
          console.warn(`‚ö†Ô∏è Kihagyott friss√≠t√©s: Floor ID=${floor.properties.id} nem l√©tezik.`);
          continue;
        }
  
        const cleanedCoordinates =
          floor.geometry.coordinates.length === 1
            ? floor.geometry.coordinates[0]
            : floor.geometry.coordinates;
  
        console.log("üìå Mentend≈ë adatok:", {
          id: floor.properties.id,
          coordinates: cleanedCoordinates,
        });
  
        await prisma.floor.upsert({
          where: { id: floor.properties.id },
          update: {
            number: floor.properties.number || existingFloor.number,
            height: floor.properties.height || existingFloor.height,
            coordinates: JSON.stringify(cleanedCoordinates), 
          },
          create: {
            id: floor.properties.id,
            number: existingFloor.number,
            height: existingFloor.height,
            buildingId: existingFloor.buildingId,
            coordinates: JSON.stringify(cleanedCoordinates),
          },
        });
      }
  
      res.json({ success: true, message: "Szintek friss√≠tve!" });
    } catch (error) {
      console.error("üö® Hiba a szintek friss√≠t√©sekor:", error);
      res.status(500).json({ error: "Nem siker√ºlt friss√≠teni a szinteket." });
    }
  }

  async function createFloors (req, res) {
    try {
      const { buildingId, number, height, coordinates } = req.body;
  
      if (!buildingId || number === undefined || height === undefined) {
        return res.status(400).json({ error: "Minden mez≈ë kit√∂lt√©se k√∂telez≈ë!" });
      }
  
      const newFloor = await prisma.floor.create({
        data: {
          buildingId,
          number,
          height,
          coordinates: coordinates ? JSON.stringify(coordinates) : [],
        },
      });
  
      res.status(201).json({ success: true, message: "Emelet sikeresen l√©trehozva!", floor: newFloor });
    } catch (error) {
      console.error("üö® Hiba az emelet l√©trehoz√°sakor:", error);
      res.status(500).json({ error: "Nem siker√ºlt l√©trehozni az emeletet." });
    }
  }

  async function deleteFloor (req, res) {
    try {
      const { id } = req.params;
  
      if (!id) {
        return res.status(400).json({ error: "Az emelet ID megad√°sa k√∂telez≈ë!" });
      }
  
      const floorId = parseInt(id, 10);
  
      // Ellen≈ërizz√ºk, hogy l√©tezik-e az emelet
      const floor = await prisma.floor.findUnique({
        where: { id: floorId },
        include: { rooms: true } // Bet√∂ltj√ºk a szob√°kat is
      });
  
      if (!floor) {
        return res.status(404).json({ error: "Az emelet nem tal√°lhat√≥!" });
      }
  
      // T√∂rl√©s: El≈ësz√∂r szob√°kat, majd az emeletet t√∂r√∂lj√ºk
      await prisma.room.deleteMany({ where: { floorId } }); // Szob√°k t√∂rl√©se
      await prisma.floor.delete({ where: { id: floorId } }); // Emelet t√∂rl√©se
  
      res.status(200).json({ success: true, message: "Emelet √©s √∂sszes terme t√∂r√∂lve!" });
    } catch (error) {
      console.error("üö® Hiba az emelet t√∂rl√©sekor:", error);
      res.status(500).json({ error: "Nem siker√ºlt t√∂r√∂lni az emeletet." });
    }
  }

  module.exports = { getFloors, updateFloors, createFloors, deleteFloor};