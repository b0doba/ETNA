const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

// üîπ √ñsszes csom√≥pont lek√©r√©se
async function getNodes(req, res) {
  try {
    const nodes = await prisma.node.findMany();
    res.json(nodes);
  } catch (error) {
    console.error("üö® Hiba a csom√≥pontok lek√©rdez√©sekor:", error);
    res.status(500).json({ error: "Hiba t√∂rt√©nt a csom√≥pontok lek√©rdez√©sekor." });
  }
}

// üîπ √öj csom√≥pont l√©trehoz√°sa
async function createNode(req, res) {
  try {
    const { name, type, floorId, buildingId, coordinates, iconUrl } = req.body;

    if (!name || !type || !coordinates) {
      return res.status(400).json({ error: "Hi√°nyz√≥ adatok!" });
    }

    const newNode = await prisma.node.create({
      data: {
        name,
        type,
        floorId,
        buildingId,
        coordinates: coordinates ? JSON.stringify(coordinates) : [],
        iconUrl,
      },
    });

    res.status(201).json({ success: true, node: newNode });
  } catch (error) {
    console.error("üö® Hiba a csom√≥pont l√©trehoz√°sakor:", error);
    res.status(500).json({ error: "Nem siker√ºlt l√©trehozni a csom√≥pontot." });
  }
}

async function updateNode(req, res) {
  try {
    const { id } = req.params;
    const { name, type, iconUrl, coordinates, floorId, buildingId } = req.body;

    if (!id) {
      return res.status(400).json({ error: "Node ID megad√°sa k√∂telez≈ë!" });
    }

    const node = await prisma.node.findUnique({ where: { id: Number(id) } });
    if (!node) {
      return res.status(404).json({ error: "Node nem tal√°lhat√≥!" });
    }

    const updatedNode = await prisma.node.update({
      where: { id: Number(id) },
      data: {
        name,
        type,
        iconUrl,
        floorId: floorId !== undefined ? floorId : null,
        buildingId: buildingId !== undefined ? buildingId : null,
        coordinates: coordinates ? JSON.stringify(coordinates) : null,
      },
    });

    res.json({ success: true, node: updatedNode });
  } catch (error) {
    console.error("üö® Hiba a node friss√≠t√©sekor:", error);
    res.status(500).json({ error: "Nem siker√ºlt friss√≠teni a node-ot." });
  }
}

async function deleteNode(req, res) {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({ error: "Node ID megad√°sa sz√ºks√©ges!" });
    }

    // üî• El≈ësz√∂r t√∂r√∂lj√ºk az √©leket, amelyek erre a Node-ra hivatkoznak
    await prisma.edge.deleteMany({
      where: {
        OR: [{ fromNodeId: Number(id) }, { toNodeId: Number(id) }],
      },
    });

    // üî• Majd t√∂r√∂lj√ºk mag√°t a csom√≥pontot
    const deletedNode = await prisma.node.delete({
      where: { id: Number(id) },
    });

    res.json({ success: true, message: "Node t√∂r√∂lve!", node: deletedNode });
  } catch (error) {
    console.error("üö® Hiba a csom√≥pont t√∂rl√©sekor:", error);
    res.status(500).json({ error: "Nem siker√ºlt t√∂r√∂lni a csom√≥pontot." });
  }
}

// üîπ √ñsszes √©l lek√©r√©se
async function getEdges(req, res) {
  try {
    const edges = await prisma.edge.findMany();
    res.json(edges);
  } catch (error) {
    console.error("üö® Hiba az √©lek lek√©rdez√©sekor:", error);
    res.status(500).json({ error: "Hiba t√∂rt√©nt az √©lek lek√©rdez√©sekor." });
  }
}

function calculateDistance(coord1, coord2) {
  const R = 6371e3;
  const toRad = deg => (deg * Math.PI) / 180;
  const œÜ1 = toRad(coord1[1]), œÜ2 = toRad(coord2[1]);
  const ŒîœÜ = toRad(coord2[1] - coord1[1]);
  const ŒîŒª = toRad(coord2[0] - coord1[0]);

  const a = Math.sin(ŒîœÜ / 2) ** 2 + Math.cos(œÜ1) * Math.cos(œÜ2) * Math.sin(ŒîŒª / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

// üîπ √öj √©l l√©trehoz√°sa
async function createEdge(req, res) {
  try {
    const { fromNodeId, toNodeId, type, iconUrl } = req.body;

    if (!fromNodeId || !toNodeId || !type) {
      return res.status(400).json({ error: "Hi√°nyz√≥ adatok!" });
    }

    const fromNode = await prisma.node.findUnique({ where: { id: fromNodeId } });
    const toNode = await prisma.node.findUnique({ where: { id: toNodeId } });

    if (!fromNode || !toNode) {
      return res.status(404).json({ error: "Nem tal√°lhat√≥ az egyik node." });
    }

    const coord1 = JSON.parse(fromNode.coordinates)[0];
    const coord2 = JSON.parse(toNode.coordinates)[0];
    const distance = calculateDistance(coord1, coord2);

    const newEdge = await prisma.edge.create({
      data: {
        fromNodeId,
        toNodeId,
        distance,
        type,
        iconUrl,
        waypoints: [coord1, coord2],
      },
    });

    res.status(201).json({ success: true, edge: newEdge });
  } catch (error) {
    console.error("üö® Hiba az √©l l√©trehoz√°sakor:", error);
    res.status(500).json({ error: "Nem siker√ºlt l√©trehozni az √©lt." });
  }
}

async function updateEdge(req, res) {
  try {
    const { id } = req.params;
    const { type, iconUrl, waypoints } = req.body;

    if (!id) {
      return res.status(400).json({ error: "Edge ID megad√°sa k√∂telez≈ë!" });
    }

    const edge = await prisma.edge.findUnique({ where: { id: Number(id) } });
    if (!edge) {
      return res.status(404).json({ error: "Edge nem tal√°lhat√≥!" });
    }

    const updatedEdge = await prisma.edge.update({
      where: { id: Number(id) },
      data: {
        type,
        iconUrl,
        waypoints,
      },
    });

    res.json({ success: true, edge: updatedEdge });
  } catch (error) {
    console.error("üö® Hiba az √©l friss√≠t√©sekor:", error);
    res.status(500).json({ error: "Nem siker√ºlt friss√≠teni az √©lt." });
  }
}

async function deleteEdge(req, res) {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({ error: "Edge ID megad√°sa sz√ºks√©ges!" });
    }

    const deletedEdge = await prisma.edge.delete({
      where: { id: Number(id) },
    });

    res.json({ success: true, message: "Edge t√∂r√∂lve!", edge: deletedEdge });
  } catch (error) {
    console.error("üö® Hiba az √©l t√∂rl√©sekor:", error);
    res.status(500).json({ error: "Nem siker√ºlt t√∂r√∂lni az √©lt." });
  }
}

module.exports = { getNodes, createNode, updateNode, deleteNode, getEdges, createEdge, updateEdge, deleteEdge };
