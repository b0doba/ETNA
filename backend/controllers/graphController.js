const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();

// üîπ √ñsszes csom√≥pont lek√©r√©se
async function getNodes(req, res) {
  try {
    const nodes = await prisma.node.findMany();
    res.json(nodes);
  } catch (error) {
    console.error("üö® Hiba a csom√≥pontok lek√©rdez√©sekor:", error);
    res.status(500).json({ error: "Hiba t√∂rt√©nt a csom√≥pontok lek√©rdez√©sekor." });
  }
}

// üîπ √öj csom√≥pont l√©trehoz√°sa
async function createNode(req, res) {
  try {
    const { name, type, floorId, buildingId, latitude, longitude, iconUrl } = req.body;

    if (!name || !type || !latitude || !longitude) {
      return res.status(400).json({ error: "Hi√°nyz√≥ adatok!" });
    }

    let parsedCoordinates;
    try {
      parsedCoordinates = JSON.parse(coordinates);
      if (!Array.isArray(parsedCoordinates) || !Array.isArray(parsedCoordinates[0])) {
        throw new Error("Hib√°s koordin√°ta form√°tum!");
      }
    } catch (error) {
      return res.status(400).json({ error: "A koordin√°t√°k nem √©rv√©nyes JSON form√°tumban vannak!" });
    }

    const newNode = await prisma.node.create({
      data: {
        name,
        type,
        floorId,
        buildingId,
        coordinates: JSON.stringify(parsedCoordinates),
        iconUrl,
      },
    });

    res.status(201).json({ success: true, node: newNode });
  } catch (error) {
    console.error("üö® Hiba a csom√≥pont l√©trehoz√°sakor:", error);
    res.status(500).json({ error: "Nem siker√ºlt l√©trehozni a csom√≥pontot." });
  }
}

async function deleteNode(req, res) {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({ error: "Node ID megad√°sa sz√ºks√©ges!" });
    }

    // üî• El≈ësz√∂r t√∂r√∂lj√ºk az √©leket, amelyek erre a Node-ra hivatkoznak
    await prisma.edge.deleteMany({
      where: {
        OR: [{ fromNodeId: Number(id) }, { toNodeId: Number(id) }],
      },
    });

    // üî• Majd t√∂r√∂lj√ºk mag√°t a csom√≥pontot
    const deletedNode = await prisma.node.delete({
      where: { id: Number(id) },
    });

    res.json({ success: true, message: "Node t√∂r√∂lve!", node: deletedNode });
  } catch (error) {
    console.error("üö® Hiba a csom√≥pont t√∂rl√©sekor:", error);
    res.status(500).json({ error: "Nem siker√ºlt t√∂r√∂lni a csom√≥pontot." });
  }
}

// üîπ √ñsszes √©l lek√©r√©se
async function getEdges(req, res) {
  try {
    const edges = await prisma.edge.findMany();
    res.json(edges);
  } catch (error) {
    console.error("üö® Hiba az √©lek lek√©rdez√©sekor:", error);
    res.status(500).json({ error: "Hiba t√∂rt√©nt az √©lek lek√©rdez√©sekor." });
  }
}

// üîπ √öj √©l l√©trehoz√°sa
async function createEdge(req, res) {
  try {
    const { fromNodeId, toNodeId, distance, type, iconUrl } = req.body;

    if (!fromNodeId || !toNodeId || !distance || !type) {
      return res.status(400).json({ error: "Hi√°nyz√≥ adatok!" });
    }

    const newEdge = await prisma.edge.create({
      data: {
        fromNodeId,
        toNodeId,
        distance,
        type,
        iconUrl,
      },
    });

    res.status(201).json({ success: true, edge: newEdge });
  } catch (error) {
    console.error("üö® Hiba az √©l l√©trehoz√°sakor:", error);
    res.status(500).json({ error: "Nem siker√ºlt l√©trehozni az √©lt." });
  }
}

module.exports = { getNodes, createNode, deleteNode, getEdges, createEdge };
