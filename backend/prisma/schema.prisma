generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Egyelőre SQLite, de hosszú távon lehet érdemes Postgres-re váltani
  url      = "file:C:/Users/bobal/Desktop/ETNA/backend/prisma/dev.db"
}

model Building {
  id          Int      @id @default(autoincrement())
  name        String
  shortName   String?
  coordinates Json?     
  group       Json?
  floors      Floor[]
  nodes      Node[]
}

model Floor {
  id          Int      @id @default(autoincrement())
  buildingId  Int
  number      Int
  height      Float //majd kiszedem, és épületbe meg szobákba teszek a 3Dhez
  coordinates Json?
  rooms       Room[]
  building    Building @relation(fields: [buildingId], references: [id])
  nodes      Node[]
}

model Room {
  id          Int      @id @default(autoincrement())
  floorId     Int
  name        String
  type        String
  coordinates Json?    
  floor       Floor    @relation(fields: [floorId], references: [id])
}

model Node {
  id         Int     @id @default(autoincrement())
  name       String
  type       String  // "room", "hallway", "stair", "elevator", "door"
  floorId    Int?
  buildingId Int?
  coordinates Json?
  iconUrl    String?

  floor      Floor?   @relation(fields: [floorId], references: [id])
  building   Building? @relation(fields: [buildingId], references: [id])

  edgesFrom  Edge[]  @relation("NodeEdgesFrom")
  edgesTo    Edge[]  @relation("NodeEdgesTo")
}

model Edge {
  id         Int    @id @default(autoincrement())
  fromNodeId Int
  toNodeId   Int
  distance   Float  // Méterben vagy relatív idő alapján
  type       String // "door", "hallway", "stair", "elevator", "outdoor"
  iconUrl    String?
  waypoints  Json?

  fromNode   Node   @relation("NodeEdgesFrom", fields: [fromNodeId], references: [id])
  toNode     Node   @relation("NodeEdgesTo", fields: [toNodeId], references: [id])
}

